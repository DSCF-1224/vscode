{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	// function
	"function: main":{
		"prefix": "main",
		"body": [
			"int main ()",
			"{",
			"\t$1",
			"",
			"\treturn EXIT_SUCCESS;",
			"}",
		],
	},

	// operator
	"operator!" :{ "prefix": "not",       "body": "!$0"   },
	"operator==":{ "prefix": "eq",        "body": "== $0" },
	"operator!=":{ "prefix": "ne",        "body": "!= $0" },
	"operator<" :{ "prefix": "lt",        "body": "< $0"  },
	"operator<=":{ "prefix": "le",        "body": "<= $0" },
	"operator>" :{ "prefix": "gt",        "body": "> $0"  },
	"operator>=":{ "prefix": "ge",        "body": ">= $0" },
	"operator++":{ "prefix": "increment", "body": "++$0"  },
	"operator--":{ "prefix": "decrement", "body": "--$0"  },
	"operator+=":{ "prefix": "increment", "body": "+= $0" },
	"operator-=":{ "prefix": "decrement", "body": "-= $0" },

	// return
	"return EXIT_SUCCESS":{ "prefix": "return", "body": "return EXIT_SUCCESS;" },
	"return EXIT_FAILURE":{ "prefix": "return", "body": "return EXIT_FAILURE;" },

	// Header file
	"Header File: vcruntime std::size_t":{
		"prefix": "size_t",
		"body": "std::size_t",
		"description": "Header File: vcruntime\n"
	},

	// File: istream
	"Header File: istream std::cin":{
		"prefix": "std::cin",
		"body": "std::cin >> $0",
		"description": "Header File: istream\nstd::istream std::cin\n"
	},

	// File: ostream
	"Header File: ostream std::cout":{
		"prefix": "std::cout",
		"body": "std::cout << $0",
		"description": "Header File: ostream\nstd::ostream std::cout\n"
	},

	"Header File: ostream std::endl":{
		"prefix": "std::endl",
		"body": "${1:<<} std::endl;$0",
		"description": "Header File: ostream\nstd::ostream std::cout\nmanipulator\n"
	},

	"Header File: ostream std::flush":{
		"prefix": "std::flush",
		"body": "${1:<<} std::flush;$0",
		"description": "Header File: ostream\nstd::ostream &__cdecl std::flush<char, std::char_traits<char>>(std::ostream &_Ostr)\n"
	},

	// File: string
	"Header File: std::string std::literals::string_literals::operator \"\"s":{
		"prefix": "operator \"\"s",
		"body": "\"$1\"$s",
		"description": "Header File: string\nstd::literals::string_literals\n"
	},

	// time stamp
	"private comments: time stamp: [yyyy/MM/dd]\n":{
		"prefix": "time stamp",
		"body": "$CURRENT_YEAR/$CURRENT_MONTH/$CURRENT_DATE",
		"description": "yyyy/MM/dd\nprivate comments\n",
	},

	"private comments: time stamp: [hh:mm:ss]\n":{
		"prefix": "time stamp",
		"body": "$CURRENT_HOUR:$CURRENT_MINUTE:$CURRENT_SECOND",
		"description": "hh:mm:ss\nprivate comments\n",
	},

	"private comments: time stamp: [yyyy/MM/dd hh:mm:ss]\n":{
		"prefix": "time stamp",
		"body": "$CURRENT_YEAR/$CURRENT_MONTH/$CURRENT_DATE $CURRENT_HOUR:$CURRENT_MINUTE:$CURRENT_SECOND",
		"description": "yyyy/MM/dd hh:mm:ss\nprivate comments\n",
	},

	// Priate Comments
	"private comments: constants for this function":{
		"prefix": "constants",
		"body": "$LINE_COMMENT constants for this function\n$0",
		"description": "private comments\n"
	},

	"private comments: STEP.0?":{
		"prefix": "STEP",
		"body": "$LINE_COMMENT STEP.0${1:?}\n$LINE_COMMENT ${0:what to do}",
		"description": "private comments\n"
	},

	"private comments: return value of this function":{
		"prefix": "return value of this function",
		"body": "$LINE_COMMENT return value of this function\n$0",
		"description": "private comments\n"
	},

	"private comments: member functions for this class":{
		"prefix": "functions",
		"body": "$LINE_COMMENT member functions for this class\n$0",
		"description": "private comments\n"
	},

	"private comments: global variables in this source code":{
		"prefix": "variables",
		"body": "$LINE_COMMENT global variables in this source code\n$0",
		"description": "private comments\n"
	},

	"private comments: member variables for this class":{
		"prefix": "variables",
		"body": "$LINE_COMMENT member variables for this class\n$0",
		"description": "private comments\n"
	},

	"private comments: lambda expression for this function":{
		"prefix": "lambda",
		"body": "$LINE_COMMENT lambda expression for this function\n$0",
		"description": "private comments\n"
	},

	"private comments: variables for this function":{
		"prefix": "variables",
		"body": "$LINE_COMMENT variables for this function\n$0",
		"description": "private comments\n"
	},

	"private comments: result":{
		"prefix": "result",
		"body": [
			"$BLOCK_COMMENT_START result (begin) $BLOCK_COMMENT_END\n",
			"$LINE_COMMENT ${1:contents}\n",
			"$BLOCK_COMMENT_START result (end) $BLOCK_COMMENT_END",
		],
		"description": "private comments\n"
	},
}
