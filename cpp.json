{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	// struct, class
	"this->???":{
		"prefix": "this",
		"body": "this->$0",
	},

	// literal
	"literal: binary": {
		"prefix": "literal binary",
		"body": "0b$1"
	},
	"literal: octal": {
		"prefix": "literal octal",
		"body": "0$1"
	},
	"literal: hex": {
		"prefix": "literal hex",
		"body": "0x$1"
	},
	"literal: long int": {
		"prefix": "literal long int",
		"body": "$1l"
	},
	"literal: long long int": {
		"prefix": "literal long long int",
		"body": "$1ll"
	},
	"literal: unsigned int": {
		"prefix": "literal unsigned int",
		"body": "$1u"
	},
	"literal: unsigned long int": {
		"prefix": "literal unsigned long int",
		"body": "$1ul"
	},
	"literal: unsigned long long int": {
		"prefix": "literal unsigned long long int",
		"body": "$1ull"
	},
	"literal: float": {
		"prefix": "literal float",
		"body": "$1f"
	},
	"literal: long double": {
		"prefix": "literal long double",
		"body": "$1l"
	},

	// function
	"function: main": {
		"prefix": "main",
		"body": [
			"int main ()",
			"{",
			"\t$1",
			"",
			"\treturn EXIT_SUCCESS;",
			"}",
		],
	},
	// operator
	"operator!": {
		"prefix": "not",
		"body": "!$0"
	},
	"operator==": {
		"prefix": "eq",
		"body": "== $0"
	},
	"operator!=": {
		"prefix": "ne",
		"body": "!= $0"
	},
	"operator<": {
		"prefix": "lt",
		"body": "< $0"
	},
	"operator<=": {
		"prefix": "le",
		"body": "<= $0"
	},
	"operator>": {
		"prefix": "gt",
		"body": "> $0"
	},
	"operator>=": {
		"prefix": "ge",
		"body": ">= $0"
	},
	"operator++": {
		"prefix": "increment",
		"body": "++$0"
	},
	"operator--": {
		"prefix": "decrement",
		"body": "--$0"
	},
	"operator+=": {
		"prefix": "increment",
		"body": "+= $0"
	},
	"operator-=": {
		"prefix": "decrement",
		"body": "-= $0"
	},

	// return
	"return EXIT_SUCCESS": {
		"prefix": "return",
		"body": "return EXIT_SUCCESS;"
	},
	"return EXIT_FAILURE": {
		"prefix": "return",
		"body": "return EXIT_FAILURE;"
	},

	// Function Templates
	"std::begin(...)": {
		"prefix": "begin",
		"body": "std::begin( $0 )",
	},

	"std::end(...)": {
		"prefix": "end",
		"body": "std::end( $0 )",
	},

	// Header file
	"Header File: vcruntime std::size_t": {
		"prefix": "size_t",
		"body": "std::size_t",
		"description": "Header File: vcruntime\n"
	},

	// Header file
	"Header File: limits: std::numeric_limits::quiet_NaN": {
		"prefix": "numeric_limits",
		"body": "std::numeric_limits<${1:T}>::quiet_NaN()",
		"description": "Header File: limits\nfunction\n"
	},
	"Memo: Header File: limits: std::numeric_limits::quiet_NaN": {
		"prefix": "numeric_limits",
		"body": "$LINE_COMMENT for function, std::numeric_limits::quiet_NaN()",
		"description": "Header File: limits\nfunction\n"
	},
	// File: iostream
	"Header File: iostream std::cin": {
		"prefix": "std::cin",
		"body": "std::cin >> $0",
		"description": "Header File: iostream\nstd::iostream std::cin\n"
	},
	"Memo: Header File: iostream std::cin": {
		"prefix": "std::cin",
		"body": "$LINE_COMMENT for variable, std::cin",
		"description": "Header File: iostream\nstd::iostream std::cin\n"
	},
	"Header File: iostream std::cout": {
		"prefix": "std::cout",
		"body": "std::cout << $0",
		"description": "Header File: iostream\nstd::iostream std::cout\n"
	},
	"Memo: Header File: iostream std::cout": {
		"prefix": "std::cout",
		"body": "$LINE_COMMENT for variable, std::cout",
		"description": "Header File: iostream\nstd::iostream std::cout\n"
	},
	// File: ostream
	"Header File: ostream std::endl": {
		"prefix": "std::endl",
		"body": "${1:<<} std::endl;$0",
		"description": "Header File: ostream\nstd::ostream std::endl\nfunction template\n"
	},
	"Memo: Header File: ostream std::endl": {
		"prefix": "std::endl",
		"body": "$LINE_COMMENT for function template, std::endl",
		"description": "Header File: ostream\nstd::ostream std::endl\nfunction template\n"
	},
	"Header File: ostream std::flush": {
		"prefix": "std::flush",
		"body": "${1:<<} std::flush;$0",
		"description": "Header File: ostream\nstd::ostream &__cdecl std::flush<char, std::char_traits<char>>(std::ostream &_Ostr)\n"
	},
	// File: string
	"Header File: std::string": {
		"prefix": "string",
		"body": "std::string",
		"description": "Header File: string\nalias\nusing std::string = std::basic_string<char, std::char_traits<char>, std::allocator<char>>\n"
	},
	"Header File: std::string std::literals::string_literals::operator \"\"s": {
		"prefix": "operator \"\"s",
		"body": "\"$1\"s$0",
		"description": "Header File: string\nstd::literals::string_literals\n"
	},
	"Header File: std::string std::literals::string_literals::operator \"\\n\"s": {
		"prefix": "operator \"\"s",
		"body": "\"\\n\"s$0",
		"description": "Header File: string\nstd::literals::string_literals\n\"\\n\"s\n"
	},
	// File: vector
	"Header File: vector: class template": {
		"prefix": "vector",
		"body": "std::vector<$1> $2",
		"description": "Header File: vector\nclass template\n"
	},
	// time stamp
	"private comments: time stamp: [yyyy/MM/dd]\n": {
		"prefix": "time stamp",
		"body": "$CURRENT_YEAR/$CURRENT_MONTH/$CURRENT_DATE",
		"description": "yyyy/MM/dd\nprivate comments\n",
	},
	"private comments: time stamp: [hh:mm:ss]\n": {
		"prefix": "time stamp",
		"body": "$CURRENT_HOUR:$CURRENT_MINUTE:$CURRENT_SECOND",
		"description": "hh:mm:ss\nprivate comments\n",
	},
	"private comments: time stamp: [yyyy/MM/dd hh:mm:ss]\n": {
		"prefix": "time stamp",
		"body": "$CURRENT_YEAR/$CURRENT_MONTH/$CURRENT_DATE $CURRENT_HOUR:$CURRENT_MINUTE:$CURRENT_SECOND",
		"description": "yyyy/MM/dd hh:mm:ss\nprivate comments\n",
	},
	// Priate Comments
	"private comments: constants for this function": {
		"prefix": "constants",
		"body": "$LINE_COMMENT constants for this function\n$0",
		"description": "private comments\n"
	},
	"private comments: STEP.0?": {
		"prefix": "STEP",
		"body": "$LINE_COMMENT STEP.0${1:?}\n$LINE_COMMENT ${0:what to do}",
		"description": "private comments\n"
	},
	"private comments: End of the file": {
		"prefix": "EOF",
		"body": "$BLOCK_COMMENT_START EOF $BLOCK_COMMENT_END\n",
		"description": "private comments\n"
	},
	"private comments: return value of this function": {
		"prefix": "return value of this function",
		"body": "$BLOCK_COMMENT_START return value of this function $BLOCK_COMMENT_END",
		"description": "private comments\n"
	},
	"private comments: member functions for this class": {
		"prefix": "functions",
		"body": "$BLOCK_COMMENT_START member functions for this class $BLOCK_COMMENT_END",
		"description": "private comments\n"
	},
	"private comments: global variables in this source code": {
		"prefix": "variables",
		"body": "$BLOCK_COMMENT_START global variables in this source code $BLOCK_COMMENT_END",
		"description": "private comments\n"
	},
	"private comments: member variables for this class": {
		"prefix": "variables",
		"body": "$BLOCK_COMMENT_START member variables for this class $BLOCK_COMMENT_END",
		"description": "private comments\n"
	},
	"private comments: nothing to do in this block scope": {
		"prefix": "nothing to do in this block scope",
		"body": "$BLOCK_COMMENT_START nothing to do in this block scope $BLOCK_COMMENT_END",
		"description": "private comments\n"
	},
	"private comments: lambda expression for this function": {
		"prefix": "lambda",
		"body": "$BLOCK_COMMENT_START lambda expression for this function $BLOCK_COMMENT_END",
		"description": "private comments\n"
	},
	"private comments: variables for this function": {
		"prefix": "variables",
		"body": "$BLOCK_COMMENT_START variables for this function $BLOCK_COMMENT_END",
		"description": "private comments\n"
	},
	"private comments: result": {
		"prefix": "result",
		"body": [
			"$BLOCK_COMMENT_START result (begin) $BLOCK_COMMENT_END\n",
			"$LINE_COMMENT ${1:contents}\n",
			"$BLOCK_COMMENT_START result (end) $BLOCK_COMMENT_END",
		],
		"description": "private comments\n"
	},
}
