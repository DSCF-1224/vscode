{
	// Place your snippets for FortranFreeForm here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"module: IEEE_ARITHMETIC":{
		"prefix": "module ieee_arithmetic",
		"body": "use, intrinsic :: ieee_arithmetic",
		"description": "module which provides support for exceptions and IEEE arithmetic\nFortran 2003 and later\n"
	},
	
	"module: IEEE_ARITHMETIC: parameter: IEEE_DOWN"    :{ "prefix": "parameter IEEE_DOWN",    "body": "IEEE_DOWN",    "description": "parameter of the intrinsic module IEEE_ARITHMETIC\nFortran 2003 and later\n"},
	"module: IEEE_ARITHMETIC: parameter: IEEE_NEAREST" :{ "prefix": "parameter IEEE_NEAREST", "body": "IEEE_NEAREST", "description": "parameter of the intrinsic module IEEE_ARITHMETIC\nFortran 2003 and later\n"},
	"module: IEEE_ARITHMETIC: parameter: IEEE_TO_ZERO" :{ "prefix": "parameter IEEE_TO_ZERO", "body": "IEEE_TO_ZERO", "description": "parameter of the intrinsic module IEEE_ARITHMETIC\nFortran 2003 and later\n"},
	"module: IEEE_ARITHMETIC: parameter: IEEE_UP"      :{ "prefix": "parameter IEEE_UP",      "body": "IEEE_UP",      "description": "parameter of the intrinsic module IEEE_ARITHMETIC\nFortran 2003 and later\n"},
	"module: IEEE_ARITHMETIC: parameter: IEEE_OTHER"   :{ "prefix": "parameter IEEE_OTHER",   "body": "IEEE_OTHER",   "description": "parameter of the intrinsic module IEEE_ARITHMETIC\nFortran 2003 and later\n"},

	"module: IEEE_EXCEPTIONS":{
		"prefix": "module ieee_exceptions",
		"body": "use, intrinsic :: ieee_exceptions",
		"description": "module which provides support for exceptions and IEEE arithmetic\nFortran 2003 and later\n"
	},

	"module: IEEE_FEATURES":{
		"prefix": "module ieee_features",
		"body": "use, intrinsic :: ieee_features",
		"description": "module which provides support for exceptions and IEEE arithmetic\nFortran 2003 and later\n"
	},

	"module: ISO_FORTRAN_ENV":{
		"prefix": "module iso_fortran_env",
		"body": "use, intrinsic :: iso_fortran_env",
		"description": "module which provides the scalar default-integer named constants\nFortran 2003 and later\n"
	},

	"ISO_FORTRAN_ENV: IS_IOSTAT_END":{
		"prefix": "is_iostat_end",
		"body": "IS_IOSTAT_END( ${1:return value of `IOSTAT`} )",
		"description": "parameter of the intrinsic module ISO_FORTRAN_ENV\ntests whether an variable has the value of the I/O status `end of file`.\n"
	},

	"ISO_FORTRAN_ENV: IS_IOSTAT_EOR":{
		"prefix": "is_iostat_eor",
		"body": "IS_IOSTAT_END( ${1:return value of `IOSTAT`} )",
		"description": "parameter of the intrinsic module ISO_FORTRAN_ENV\ntests whether an variable has the value of the I/O status `end of record`.\n"
	},

	"ISO_FORTRAN_ENV: parameter: INPUT_UNIT":{
		"prefix": "parameter INPUT_UNIT",
		"body": "INPUT_UNIT",
		"description": "parameter of the intrinsic module ISO_FORTRAN_ENV\nIdentifies the preconnected unit identified by the asterisk (*) in READ statement.\n"
	},

	"ISO_FORTRAN_ENV: parameter: OUTPUT_UNIT":{
		"prefix": "parameter OUTPUT_UNIT",
		"body": "OUTPUT_UNIT",
		"description": "parameter of the intrinsic module ISO_FORTRAN_ENV\nIdentifies the preconnected unit identified by the asterisk (*) in WRITE statement.\n"
	},

	"ISO_FORTRAN_ENV: parameter: INT8" :{ "prefix": "parameter INT8",  "body": "INT8",  "description": "parameter of the intrinsic module ISO_FORTRAN_ENV\nKind type parameters to specify an INTEGER type with a storage size of 8 bits.\nmin : -128\nmax : +127\n" },
	"ISO_FORTRAN_ENV: parameter: INT16":{ "prefix": "parameter INT16", "body": "INT16", "description": "parameter of the intrinsic module ISO_FORTRAN_ENV\nKind type parameters to specify an INTEGER type with a storage size of 16 bits.\nmin : -32,768\nmax : +32,767\n" },
	"ISO_FORTRAN_ENV: parameter: INT32":{ "prefix": "parameter INT32", "body": "INT32", "description": "parameter of the intrinsic module ISO_FORTRAN_ENV\nKind type parameters to specify an INTEGER type with a storage size of 32 bits.\nmin : -2,147,483,648\nmax : +2,147,483,647\n" },
	"ISO_FORTRAN_ENV: parameter: INT64":{ "prefix": "parameter INT64", "body": "INT64", "description": "parameter of the intrinsic module ISO_FORTRAN_ENV\nKind type parameters to specify an INTEGER type with a storage size of 64 bits.\nmin : -9,223,372,036,854,775,808\nmax : +9,223,372,036,854,775,807\n" },

	"ISO_FORTRAN_ENV: parameter: REAL32" :{ "prefix": "parameter REAL32",  "body": "REAL32",  "description": "parameter of the intrinsic module ISO_FORTRAN_ENV\nKind type parameters to specify an REAL type with a storage size of 32 bits.\n" },
	"ISO_FORTRAN_ENV: parameter: REAL64" :{ "prefix": "parameter REAL64",  "body": "REAL64",  "description": "parameter of the intrinsic module ISO_FORTRAN_ENV\nKind type parameters to specify an REAL type with a storage size of 64 bits.\n" },
	"ISO_FORTRAN_ENV: parameter: REAL128":{ "prefix": "parameter REAL128", "body": "REAL128", "description": "parameter of the intrinsic module ISO_FORTRAN_ENV\nKind type parameters to specify an REAL type with a storage size of 128 bits.\n" },

	"ISO_FORTRAN_ENV: Intrinsic types : INT8"  :{ "prefix": "integer", "body": "integer(INT8)${1:, attributes} :: $0",  "description": "parameter of the intrinsic module ISO_FORTRAN_ENV\nKind type parameters to specify an INTEGER type with a storage size of 8 bits.\nmin : -128\nmax : +127\n" },
	"ISO_FORTRAN_ENV: Intrinsic types : INT16" :{ "prefix": "integer", "body": "integer(INT16)${1:, attributes} :: $0", "description": "parameter of the intrinsic module ISO_FORTRAN_ENV\nKind type parameters to specify an INTEGER type with a storage size of 16 bits.\nmin : -32,768\nmax : +32,767\n" },
	"ISO_FORTRAN_ENV: Intrinsic types : INT32" :{ "prefix": "integer", "body": "integer(INT32)${1:, attributes} :: $0", "description": "parameter of the intrinsic module ISO_FORTRAN_ENV\nKind type parameters to specify an INTEGER type with a storage size of 32 bits.\nmin : -2,147,483,648\nmax : +2,147,483,647\n" },
	"ISO_FORTRAN_ENV: Intrinsic types : INT64" :{ "prefix": "integer", "body": "integer(INT64)${1:, attributes} :: $0", "description": "parameter of the intrinsic module ISO_FORTRAN_ENV\nKind type parameters to specify an INTEGER type with a storage size of 64 bits.\nmin : -9,223,372,036,854,775,808\nmax : +9,223,372,036,854,775,807\n" },

	"ISO_FORTRAN_ENV: Intrinsic types : REAL32"  :{ "prefix": "REAL", "body": "real(REAL32)${1:, attributes} :: $0",  "description": "parameter of the intrinsic module ISO_FORTRAN_ENV\nKind type parameters to specify an REAL type with a storage size of 32 bits.\n" },
	"ISO_FORTRAN_ENV: Intrinsic types : REAL64"  :{ "prefix": "REAL", "body": "real(REAL64)${1:, attributes} :: $0",  "description": "parameter of the intrinsic module ISO_FORTRAN_ENV\nKind type parameters to specify an REAL type with a storage size of 64 bits.\n" },
	"ISO_FORTRAN_ENV: Intrinsic types : REAL128" :{ "prefix": "REAL", "body": "real(REAL128)${1:, attributes} :: $0", "description": "parameter of the intrinsic module ISO_FORTRAN_ENV\nKind type parameters to specify an REAL type with a storage size of 128 bits.\n" },

	"ISO_FORTRAN_ENV: Intrinsic types : INT8  : for literal" :{ "prefix": "literal integer INT8", "body": "${1:value}_INT8$0",   "description": "parameter of the intrinsic module ISO_FORTRAN_ENV\nKind type parameters to specify an INTEGER type with a storage size of 8 bits.\nmin : -128\nmax : +127\n" },
	"ISO_FORTRAN_ENV: Intrinsic types : INT16 : for literal" :{ "prefix": "literal integer INT16", "body": "${1:value}_INT16$0", "description": "parameter of the intrinsic module ISO_FORTRAN_ENV\nKind type parameters to specify an INTEGER type with a storage size of 16 bits.\nmin : -32,768\nmax : +32,767\n" },
	"ISO_FORTRAN_ENV: Intrinsic types : INT32 : for literal" :{ "prefix": "literal integer INT32", "body": "${1:value}_INT32$0", "description": "parameter of the intrinsic module ISO_FORTRAN_ENV\nKind type parameters to specify an INTEGER type with a storage size of 32 bits.\nmin : -2,147,483,648\nmax : +2,147,483,647\n" },
	"ISO_FORTRAN_ENV: Intrinsic types : INT64 : for literal" :{ "prefix": "literal integer INT64", "body": "${1:value}_INT64$0", "description": "parameter of the intrinsic module ISO_FORTRAN_ENV\nKind type parameters to specify an INTEGER type with a storage size of 64 bits.\nmin : -9,223,372,036,854,775,808\nmax : +9,223,372,036,854,775,807\n" },

	/* OpenMP */
	"OpenMP: use omp_lib":{
		"prefix": "module omp_lib",
		"body": "$LINE_COMMENT$ use omp_lib$LINE_COMMENT use OpenMP",
		"description": "[OpenMP]\n"
	},

	"OpenMP: omp_num_threads":{
		"prefix": "omp_num_threads",
		"body": "omp_num_threads()",
		"description": "[OpenMP]\n"
	},

	"OpenMP: do":{
		"prefix": "do",
		"body": [
			"$LINE_COMMENT$$omp do",
			"\t$0",
			"$LINE_COMMENT$$omp end do",
		],
		"description": "[OpenMP]\n"
	},

	"OpenMP: parallel":{
		"prefix": "parallel",
		"body": [
			"$LINE_COMMENT$$omp parallel $1",
			"\t$0",
			"$LINE_COMMENT$$omp end parallel",
		],
		"description": "[OpenMP]\n"
	},

	"OpenMP: sections":{
		"prefix": "sections",
		"body": [
			"$LINE_COMMENT$$omp sections $1",
			"\t$0",
			"$LINE_COMMENT$$omp end sections",
		],
		"description": "[OpenMP]\nsections"
	},

	"OpenMP: section":{
		"prefix": "section",
		"body": [
			"$LINE_COMMENT$$omp section",
			"\t${1:}",
		],
		"description": "[OpenMP]\nsections"
	},

	"OpenMP: shared":{
		"prefix": "shared",
		"body": "shared( ${1:list} )",
		"description": "[OpenMP]\nlist で示される変数が共有される事を示します。\nすべての thread で同じデータが共有されます。\n"
	},

	"OpenMP: private":{
		"prefix": "private",
		"body": "private( ${1:list} )",
		"description": "[OpenMP]\nlist で示される変数が thread 毎に用意されることを示します。\nこの thread 毎に用意される変数は、構文開始時に（もともとの変数値に関わらず）全く新たに未定義の状態で作成されます。\n"
	},

	"OpenMP: firstprivate":{
		"prefix": "firstprivate",
		"body": "firstprivate( ${1:list} )",
		"description": "[OpenMP]\nlist で示される変数が thread 毎に用意されることを示します。\nこの thread 毎に用意される変数は、 private の場合と異なり、構文開始時にもともとの変数値で初期化されます。\n"
	},

	"OpenMP: default":{
		"prefix": "default",
		"body": "default( ${1:private|firstprivate|shared|none} )",
		"description": "[OpenMP]\nlist で示される変数が thread 毎に用意されることを示します。\n"
	},

	"OpenMP: default: private":{
		"prefix": "default",
		"body": "default( private )",
		"description": "[OpenMP]\nデータ共有属性の指定を行わなかった変数の default の属性を指定します。\nprivate を指定した場合、この thread 毎に用意される変数は、構文開始時に（もともとの変数値に関わらず）全く新たに未定義の状態で作成されます。\n"
	},

	"OpenMP: default: firstprivate":{
		"prefix": "default",
		"body": "default( firstprivate )",
		"description": "[OpenMP]\nデータ共有属性の指定を行わなかった変数の default の属性を指定します。\nfirstprivate を指定した場合、この thread 毎に用意される変数は、 private の場合と異なり、構文開始時にもともとの変数値で初期化されます。\n"
	},

	"OpenMP: default: shared":{
		"prefix": "default",
		"body": "default( shared )",
		"description": "[OpenMP]\nデータ共有属性の指定を行わなかった変数の default の属性を指定します。\nshared を指定した場合、すべての thread で同じデータが共有されます。\n"
	},

	"OpenMP: default: none":{
		"prefix": "default",
		"body": "default( none )",
		"description": "[OpenMP]\nデータ共有属性の指定を行わなかった変数の default の属性を指定します。\nnone を指定した場合、構文内で使われるすべての変数のデータ共有属性を明示的に指定する必要があります。\n"
	},

	// private comment //
	"private comments: arguments for this <function>"   :{"prefix": "comment arguments", "body": "$LINE_COMMENT arguments for this <function>",   "description": "private comments\n" },
	"private comments: arguments for this <subroutine>" :{"prefix": "comment arguments", "body": "$LINE_COMMENT arguments for this <subroutine>", "description": "private comments\n" },
	"private comments: constants for this <function>"   :{"prefix": "comment constants", "body": "$LINE_COMMENT constants for this <function>",   "description": "private comments\n" },

	"private comments: constants for this <module>"  :{"prefix": "comment constants", "body": "$LINE_COMMENT constants for this <module>",  "description": "private comments\n" },
	"private comments: constants for this <program>" :{"prefix": "comment constants", "body": "$LINE_COMMENT constants for this <program>", "description": "private comments\n" },

	"private comments: accessibility":{
		"prefix": "comment accessibility",
		"body": "$LINE_COMMENT accessibility of the <subroutine>s and <function>s in this <module>\npublic  :: \nprivate ::",
		"description": "private comments\n"
	},

	"private comments: contains":{
		"prefix": "comment contains",
		"body": "$LINE_COMMENT contained <subroutine>s and <function>s are below\ncontains",
		"description": "private comments\nbefore `contains`\n"
	},

	"private comments: implicit none":{
		"prefix": "comment implicit none",
		"body": "$LINE_COMMENT require all variables to be explicitly declared\nimplicit none",
		"description": "private comments\nbefore `implicit none`\n"
	},

	"private comments: <interface>s for this <program>" :{ "prefix": "comment interface", "body": "$LINE_COMMENT <interface>s for this <program>", "description": "private comments\n" },
	"private comments: <interface>s for this <module>"  :{ "prefix": "comment interface", "body": "$LINE_COMMENT <interface>s for this <module>",  "description": "private comments\n" },

	"private comments: <module>s to import":{
		"prefix": "comment module",
		"body": "$LINE_COMMENT <module>s to import",
		"description": "private comments\nbefore `USE ...`\n"
	},

	"private comments: variables for this <function>"   :{ "prefix": "comment variables", "body": "$LINE_COMMENT ${1:support }variables for this <function>",   "description": "private comments\n" },
	"private comments: variables for this <module>"     :{ "prefix": "comment variables", "body": "$LINE_COMMENT ${1:support }variables for this <module>",     "description": "private comments\n" },
	"private comments: variables for this <program>"    :{ "prefix": "comment variables", "body": "$LINE_COMMENT ${1:support }variables for this <program>",    "description": "private comments\n" },
	"private comments: variables for this <subroutine>" :{ "prefix": "comment variables", "body": "$LINE_COMMENT ${1:support }variables for this <subroutine>", "description": "private comments\n" },

	"private comments: <type>s for this <program>":{
		"prefix": "comment type",
		"body": "$LINE_COMMENT <type>s for this <program>",
		"description": "private comments\n"
	},

	"private comments: STEP.0?":{
		"prefix": "STEP",
		"body": "$LINE_COMMENT STEP.0${1:?}\n$LINE_COMMENT ${0:what to do}",
		"description": "private comments\n"
	},

	"private comments: STEP.END":{
		"prefix": "STEP",
		"body": "$LINE_COMMENT STEP.END\nreturn",
		"description": "private comments\n"
	},

	"private comments: return value of this <function>":{
		"prefix": "comment return value",
		"body": "$LINE_COMMENT return value of this <function>",
		"description": "private comments\n"
	},

	// <CLOSE> statement
	"<CLOSE> statement: status: delete" :{ "prefix": "close status", "body": "status='delete', $0", "description": "<CLOSE> statement\n" },
	"<CLOSE> statement: status: keep"   :{ "prefix": "close status", "body": "status='keep', $0",   "description": "<CLOSE> statement\n" },

	// <INTENT> statement
	"<INTENT> statement: in"    : { "prefix": "intent", "body": "intent(in)",    "description": "<INTENT> statement\n" },
	"<INTENT> statement: inout" : { "prefix": "intent", "body": "intent(inout)", "description": "<INTENT> statement\n" },
	"<INTENT> statement: out"   : { "prefix": "intent", "body": "intent(out)",   "description": "<INTENT> statement\n" },

	// <OPEN> statement
	"Specifier of <OPEN> statement: action: read"      :{ "prefix": "open action",  "body": "action='read', $0",                              "description": "<OPEN> statement\n" },
	"Specifier of <OPEN> statement: action: write"     :{ "prefix": "open action",  "body": "action='write', $0",                             "description": "<OPEN> statement\n" },
	"Specifier of <OPEN> statement: action: readwrite" :{ "prefix": "open action",  "body": "action='readwrite', $0",                         "description": "<OPEN> statement\n" },
	"Specifier of <OPEN> statement: status: old"       :{ "prefix": "open status",  "body": "status='old', $0",                               "description": "<OPEN> statement\n" },
	"Specifier of <OPEN> statement: status: new"       :{ "prefix": "open status",  "body": "status='new', $0",                               "description": "<OPEN> statement\n" },
	"Specifier of <OPEN> statement: status: scratch"   :{ "prefix": "open status",  "body": "status='scratch', $0",                           "description": "<OPEN> statement\n" },
	"Specifier of <OPEN> statement: status: replace"   :{ "prefix": "open status",  "body": "status='replace', $0",                           "description": "<OPEN> statement\n" },
	"Specifier of <OPEN> statement: status: unknown"   :{ "prefix": "open status",  "body": "status='unknown', $0",                           "description": "<OPEN> statement\n" },
	"Specifier of <OPEN> statement: unit: implicit"    :{ "prefix": "open unit",    "body": "unit=${1:unit number}, $0",                      "description": "<OPEN> statement\n" },
	"Specifier of <OPEN> statement: file: implicit"    :{ "prefix": "open file",    "body": "file=${1:string which shows the file path}, $0", "description": "<OPEN> statement\n" },

	// <READ> statement
	"Specifier of <READ> statement: fmt: arbitrary"  :{ "prefix": "read fmt",  "body": "fmt=*, $0",           "description": "when read out something as an arbitrary format\n" },
	"Specifier of <READ> statement: fmt: standard"   :{ "prefix": "read fmt",  "body": "fmt='($1)', $0",      "description": "when read out something as a default format\n" },
	"Specifier of <READ> statement: unit: INPUT_UNIT":{ "prefix": "read unit", "body": "unit=INPUT_UNIT, $0", "description": "when read out something from default input\nISO_FORTRAN_ENV module is required !\n" },

	"<READ> statement: unit=INPUT_UNIT, fmt=*"     :{ "prefix": "read", "body": "read(unit=INPUT_UNIT, fmt=*) ${1:variables}",     "description": "<READ> statement\n" },
	"<READ> statement: unit=INPUT_UNIT, fmt='(A)'" :{ "prefix": "read", "body": "read(unit=INPUT_UNIT, fmt='(A)') ${1:variables}", "description": "<READ> statement\n" },
	
	// <WRITE> statement
	"Specifier of <WRITE> statement: advance: yes"   :{ "prefix": "write advance", "body": "advance='yes', $0", "description": "when the statement `WRITE` uses advancing input\nThe default value is 'yes'\n" },
	"Specifier of <WRITE> statement: advance: no"    :{ "prefix": "write advance", "body": "advance='no', $0" , "description": "when the statement `WRITE` uses synchronous input\nThe default value is 'yes'\n" },
	"Specifier of <WRITE> statement: fmt: arbitrary" :{ "prefix": "write fmt",     "body": "fmt=*, $0" ,        "description": "when the statement `WRITE` uses an arbitrary format\nThe default value is 'yes'\n" },
	"Specifier of <WRITE> statement: fmt: default"   :{ "prefix": "write fmt",     "body": "fmt='($1)', $0" ,   "description": "when the statement `WRITE` uses a default format\nThe default value is 'yes'\n" },
	"Specifier of <WRITE> statement: unit: default"  :{ "prefix": "write unit",    "body": "unit=*, $0" ,       "description": "when the statement `WRITE` uses a default unit\nThe default value is 'yes'\n" },

	"<WRITE> statement OUTPUT_UNIT, *, 'yes'"      : { "prefix": "write", "body": "write(unit=OUTPUT_UNIT, fmt=*, advance='yes')",      "description": "<WRITE> statement\nunit=OUTPUT_UNIT\nfmt=*\nadvance='yes'\n" },
	"<WRITE> statement OUTPUT_UNIT, '(A)', 'yes'"  : { "prefix": "write", "body": "write(unit=OUTPUT_UNIT, fmt='(A)', advance='yes')",  "description": "<WRITE> statement\nunit=OUTPUT_UNIT\nfmt='(A)'\nadvance='yes'\n" },
	"<WRITE> statement OUTPUT_UNIT, '(I0)', 'yes'" : { "prefix": "write", "body": "write(unit=OUTPUT_UNIT, fmt='(I0)', advance='yes')", "description": "<WRITE> statement\nunit=OUTPUT_UNIT\nfmt='(I0)'\nadvance='yes'\n" },

	"<WRITE> statement OUTPUT_UNIT, *, 'no'"      : { "prefix": "write", "body": "write(unit=OUTPUT_UNIT, fmt=*, advance='no')",      "description": "<WRITE> statement\nunit=OUTPUT_UNIT\nfmt=*\nadvance='no'\n" },
	"<WRITE> statement OUTPUT_UNIT, '(A)', 'no'"  : { "prefix": "write", "body": "write(unit=OUTPUT_UNIT, fmt='(A)', advance='no')",  "description": "<WRITE> statement\nunit=OUTPUT_UNIT\nfmt='(A)'\nadvance='no'\n" },
	"<WRITE> statement OUTPUT_UNIT, '(I0)', 'no'" : { "prefix": "write", "body": "write(unit=OUTPUT_UNIT, fmt='(I0)', advance='no')", "description": "<WRITE> statement\nunit=OUTPUT_UNIT\nfmt='(I0)'\nadvance='no'\n" },

	// Keywords
	"Keywords of Fortran 77: intrinsic":     { "prefix": "intrinsic",     "body": "intrinsic",     "description": "Keywords of Fortran\nFrom FORTRAN 77\n" },
	"Keywords of Fortran 77: non_intrinsic": { "prefix": "non_intrinsic", "body": "non_intrinsic", "description": "Keywords of Fortran\nFrom FORTRAN 77\n" },
	"Keywords of Fortran 77: parameter":     { "prefix": "parameter",     "body": "parameter",     "description": "Keywords of Fortran\nFrom FORTRAN 77\n" },
	"Keywords of Fortran 90: allocatable":   { "prefix": "allocatable",   "body": "allocatable",   "description": "Keywords of Fortran\nFrom FORTRAN 90\n" },
	"Keywords of Fortran 90: public":        { "prefix": "public",        "body": "public :: $0",  "description": "Keywords of Fortran\nFrom FORTRAN 90\n" },
	"Keywords of Fortran 90: private":       { "prefix": "private",       "body": "private :: $0", "description": "Keywords of Fortran\nFrom FORTRAN 90\n" },

	// others //
	"CURRENT_YEAR.CURRENT_MONTH.CURRENT_DATE: ":{
		"prefix": "CURRENT_YEAR.CURRENT_MONTH.CURRENT_DATE",
		"body": "$CURRENT_YEAR.$CURRENT_MONTH.$CURRENT_DATE",
		"description": "CURRENT_YEAR.CURRENT_MONTH.CURRENT_DATE"
	},
}
