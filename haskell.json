{
	// Place your snippets for haskell here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	// module Prelude

		// Prelude / functions

		"Prelude.elem":{
			"prefix": "Prelude.elem",
			"body": "Prelude.elem $0",
			"description": "Prelude module\nfunctions\nFolds and traversals\nPrelude.elem :: Eq a => a -> t a -> Bool \n"
		},

		// Prelude / functions / Basic type classes
		// Prelude / functions / Numbers

			// Prelude / functions / Numbers / Numeric type classes

			"Prelude.div":{
				"prefix": "Prelude.div",
				"body": "Prelude.div ${1:integer} ${2:integer}",
				"description": "Prelude module\nfunctions\nNumbers\nNumeric type classes\nPrelude.div :: a -> a -> a "
			},

			"Prelude.mod":{
				"prefix": "Prelude.mod",
				"body": "Prelude.mod ${1:integer} ${2:integer}",
				"description": "Prelude module\nfunctions\nNumbers\nNumeric type classes\nPrelude.mod :: a -> a -> a"
			},

			// Prelude / functions / Numbers / Numeric functions

			"Prelude.even":{
				"prefix": "Prelude.even",
				"body": "Prelude.even ${1:integer}",
				"description": "Prelude module\nfunctions\nNumbers\nNumeric functions\nPrelude.even :: Integral a => a -> Bool"
			},

			"Prelude.gcd":{
				"prefix": "Prelude.gcd",
				"body": "Prelude.gcd ${1:integer} ${2:integer}",
				"description": "Prelude module\nfunctions\nNumbers\nNumeric functions\nPrelude.gcd :: Integral a => a -> a -> a"
			},

		// Prelude / functions / Folds and traversals

		"Prelude.foldr":{
			"prefix": "foldr",
			"body": "Prelude.foldr ${1:function} ${2:z} ${3:list}",
			"description": "Prelude module\nfunctions\nFolds and traversals\nPrelude.foldr :: (a -> b -> b) -> b -> t a -> b"
		},

		"Prelude.foldl":{
			"prefix": "foldl",
			"body": "Prelude.foldl ${1:function} ${2:z} ${3:list}",
			"description": "Prelude module\nfunctions\nFolds and traversals\nPrelude.foldl :: (b -> a -> b) -> b -> t a -> b"
		},

		"Prelude.product":{
			"prefix": "product",
			"body": "Prelude.product ${1:list}",
			"description": "Prelude module\nfunctions\nFolds and traversals\nPrelude.product :: (b -> a -> b) -> b -> t a -> b"
		},

		// List Operations

		"Prelude.map":{
			"prefix": "map",
			"body": "Prelude.map ${1:function} ${2:list}",
			"description": "Prelude module\nList operations\nPrelude.map :: (a -> b) -> [a] -> [b]\n"
		},

		"Prelude.filter":{
			"prefix": "filter",
			"body": "Prelude.filter ${1:function} ${2:list}",
			"description": "Prelude module\nList operations\nPrelude.filter :: [a] -> Int -> a\n"
		},

		"Prelude.head":{
			"prefix": "Prelude.head",
			"body": "Prelude.head ${0:list}",
			"description": "Prelude module\nList operations\nPrelude.head :: [a] -> a\n"
		},

		"Prelude.tail":{
			"prefix": "Prelude.tail",
			"body": "Prelude.tail ${0:list}",
			"description": "Prelude module\nList operations\nPrelude.tail :: [a] -> [a]\n"
		},

		"Prelude.!! (front)":{
			"prefix": "index",
			"body": "!! $0",
			"description": "Prelude module\nList operations\nPrelude.!! :: [a] -> Int -> a\n"
		},

		"Prelude.!! (mid)":{
			"prefix": "index",
			"body": "(!!) ${1:list} ${0:index}",
			"description": "Prelude module\nList operations\nPrelude.!! :: [a] -> Int -> a\n"
		},

		"Prelude.length":{
			"prefix": "length",
			"body": "Prelude.length ${0:list}",
			"description": "Prelude module\nList operations\nPrelude.length :: Foldable t => t a -> Int\n"
		},

		"Prelude.cycle":{
			"prefix": "cycle",
			"body": "Prelude.cycle ${1:list}",
			"description": "Prelude module\nList operations\nBuilding lists\nInfinite list\nPrelude.cycle :: [a] -> [a]\n"
		},

		"Prelude.take":{
			"prefix": "take",
			"body": "Prelude.take ${1:integer} ${2:list}",
			"description": "Prelude module\nList operations\nSublists\nPrelude.take :: Int -> [a] -> [a]\n"
		},

		"Prelude.drop":{
			"prefix": "drop",
			"body": "Prelude.drop ${1:integer} ${2:list}",
			"description": "Prelude module\nList operations\nSublists\nPrelude.drop :: Int -> [a] -> [a]\n"
		},

		"Prelude.zip":{
			"prefix": "zip",
			"body": "Prelude.zip ${1:list} ${2:list}",
			"description": "Prelude module\nList operations\nSublists\nPrelude.zip :: [a] -> [b] -> [(a, b)]\n"
		},

		"Prelude.reverse":{
			"prefix": "reverse",
			"body": "Prelude.reverse ${0:list}",
			"description": "Prelude module\nList operations\nPrelude.reverse :: [a] -> [a]\n"
		},

	"Prelude.print":{
		"prefix": "print",
		"body": "Prelude.print $0",
		"description": "Prelude module\nSimple I/O operations\nOutput functions\nPrelude.print :: Show a => a -> IO ()\n"
	},
}